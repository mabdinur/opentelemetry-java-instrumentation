// this project will run in isolation under the agent's classloader
buildscript {

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "net.bytebuddy:byte-buddy-gradle-plugin:${versions.bytebuddy}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
  }
}
plugins {
  id "com.github.johnrengelman.shadow"
}
apply from: "$rootDir/gradle/java.gradle"

Project instr_project = project
subprojects {
  afterEvaluate { Project subProj ->
    if (subProj.getPlugins().hasPlugin('java')) {
      // Make it so all instrumentation subproject tests can be run with a single command.
      instr_project.tasks.test.dependsOn(subProj.tasks.test)

      if (subProj.findProperty('packageInAgentBundle')) {
        instr_project.dependencies {
          implementation(project(subProj.getPath()))
        }
      }
    }
  }
}

dependencies {
  implementation project(':library-api')
  implementation project(':auto-api')
  implementation(project(':auto-tooling')) {
    exclude module: ':auto-bootstrap'
  }
}

configurations {
  // exclude bootstrap dependencies from shadowJar
  implementation.exclude module: deps.slf4j
  implementation.exclude group: 'org.slf4j'
  implementation.exclude group: 'io.opentelemetry', module: 'opentelemetry-api'
}

shadowJar {

  mergeServiceFiles()

  exclude '**/module-info.class'

  // Prevents conflict with other SLF4J instances. Important for premain.
  relocate 'org.slf4j', 'io.opentelemetry.auto.slf4j'

  duplicatesStrategy = DuplicatesStrategy.FAIL

  dependencies {
    exclude(project(':auto-bootstrap'))
  }

  // rewrite library instrumentation dependencies
  relocate("io.opentelemetry.instrumentation", "io.opentelemetry.auto.shaded.instrumentation") {
    exclude "io.opentelemetry.instrumentation.auto.**"
  }

  // rewrite dependencies calling Logger.getLogger
  relocate 'java.util.logging.Logger', 'io.opentelemetry.auto.bootstrap.PatchLogger'

  // prevents conflict with library instrumentation
  relocate 'io.opentelemetry.instrumentation.api', 'io.opentelemetry.auto.shaded.instrumentation.api'

  // relocate OpenTelemetry API usage
  relocate "io.opentelemetry.OpenTelemetry", "io.opentelemetry.auto.shaded.io.opentelemetry.OpenTelemetry"
  relocate "io.opentelemetry.common", "io.opentelemetry.auto.shaded.io.opentelemetry.common"
  relocate "io.opentelemetry.context", "io.opentelemetry.auto.shaded.io.opentelemetry.context"
  relocate "io.opentelemetry.correlationcontext", "io.opentelemetry.auto.shaded.io.opentelemetry.correlationcontext"
  relocate "io.opentelemetry.internal", "io.opentelemetry.auto.shaded.io.opentelemetry.internal"
  relocate "io.opentelemetry.metrics", "io.opentelemetry.auto.shaded.io.opentelemetry.metrics"
  relocate "io.opentelemetry.trace", "io.opentelemetry.auto.shaded.io.opentelemetry.trace"

  // relocate OpenTelemetry API dependency usage
  relocate "io.grpc.Context", "io.opentelemetry.auto.shaded.io.grpc.Context"

  // this is for instrumentation on opentelemetry-api itself
  relocate "unshaded.io.opentelemetry", "io.opentelemetry"
  relocate "unshaded.io.grpc", "io.grpc"
}
